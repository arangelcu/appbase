services:
  appbase:
    image: appbase
    container_name: app-backend
    ports:
      - "8000:8080"  # local_port:container_port     
    build:
      context: .
      dockerfile: AppBase/Dockerfile
    depends_on:
      postgresdb:
        condition: service_healthy
    environment:
      - DB_CONNECTION=Host=postgresdb;Port=5432;Database=appbasedb;Username=postgres;Password=postgres
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - monitoring

  postgresdb:
    image: postgis/postgis:15-3.3
    container_name: app-postgres
    ports:
      - "50432:5432"  # local_port:container_port    
    environment:
      - POSTGRES_DB=appbasedb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d appbasedb" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: app-prometheus
    ports:
      - "8001:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - appbase
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: app-grafana
    ports:
      - "8002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - monitoring

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  monitoring:
    driver: bridge